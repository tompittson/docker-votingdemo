version: "3.7"
services:

  db-init:
    image: cockroachdb/cockroach:v2.1.6
    hostname: "db-init"
    command: ["start", "--logtostderr", "--insecure", "--advertise-addr=db-init"]
    ports:
     - '8082:8080'
    volumes:
     - cockroach-init:/cockroach/cockroach-data
    networks:
     - backend
    deploy:
      replicas: 1
     
  db:
    image: cockroachdb/cockroach:v2.1.6
    command: ["start", "--logtostderr", "--insecure", "--join=db-init"]    
    volumes:
     - cockroach:/cockroach/cockroach-data
    networks:
     - backend
    deploy:
      replicas: 4

  redis:
    image: redis:alpine
    networks:
      - frontend
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  vote:
    image: localhost:5050/votingdemo-vote:cockroach
    ports:
      - 5000:80
    networks:
      - frontend
    depends_on:
      - redis
    deploy:
      replicas: 2
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure

  result:
    image: localhost:5050/votingdemo-result:cockroach
    ports:
      - 5001:80
    networks:
      - backend
    depends_on:
      - db
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  worker:
    image: localhost:5050/votingdemo-worker:cockroach
    networks:
      - frontend
      - backend
    deploy:
      mode: replicated
      replicas: 1
      labels: [APP=VOTING]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [node.role == manager]

networks:
  frontend:
  backend:

volumes:
  cockroach-init:    
    driver: 'cloudstor:azure'
    driver_opts:
      share: 'cockroach-init'
  cockroach:
    name: '{{.Service.Name}}-{{.Task.Slot}}'
    driver: 'cloudstor:azure'
